/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace MoneyBoxesModule {
  export type MoneyBoxConfigurationStruct = {
    percentage: BigNumberish;
    name: string;
    isActive: boolean;
  };

  export type MoneyBoxConfigurationStructOutput = [
    BigNumber,
    string,
    boolean
  ] & { percentage: BigNumber; name: string; isActive: boolean };
}

export interface MoneyBoxesAbiInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "boxes(uint256)": FunctionFragment;
    "getBalanceOfBox(uint256,address)": FunctionFragment;
    "getNumberOfBoxes()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeAddress()": FunctionFragment;
    "transferFromBoxToAddress(uint256,uint256,address,address)": FunctionFragment;
    "transferFromBoxToBox(uint256,uint256,uint256,address)": FunctionFragment;
    "transferFromBoxToSafe(uint256,uint256,address)": FunctionFragment;
    "transferFromSafeToBoxes(uint256,address)": FunctionFragment;
    "transferNotAccountedFundsToSafe(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "VERSION"
      | "boxes"
      | "getBalanceOfBox"
      | "getNumberOfBoxes"
      | "owner"
      | "renounceOwnership"
      | "safeAddress"
      | "transferFromBoxToAddress"
      | "transferFromBoxToBox"
      | "transferFromBoxToSafe"
      | "transferFromSafeToBoxes"
      | "transferNotAccountedFundsToSafe"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "boxes", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getBalanceOfBox",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfBoxes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromBoxToAddress",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromBoxToBox",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromBoxToSafe",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromSafeToBoxes",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNotAccountedFundsToSafe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boxes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceOfBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfBoxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromBoxToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromBoxToBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromBoxToSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromSafeToBoxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNotAccountedFundsToSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MoneyBoxesAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MoneyBoxesAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    boxes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [MoneyBoxesModule.MoneyBoxConfigurationStructOutput] & {
        config: MoneyBoxesModule.MoneyBoxConfigurationStructOutput;
      }
    >;

    getBalanceOfBox(
      boxId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfBoxes(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeAddress(overrides?: CallOverrides): Promise<[string]>;

    transferFromBoxToAddress(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      toAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFromBoxToBox(
      fromBoxId: BigNumberish,
      toBoxId: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFromBoxToSafe(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFromSafeToBoxes(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferNotAccountedFundsToSafe(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  boxes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MoneyBoxesModule.MoneyBoxConfigurationStructOutput>;

  getBalanceOfBox(
    boxId: BigNumberish,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfBoxes(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeAddress(overrides?: CallOverrides): Promise<string>;

  transferFromBoxToAddress(
    boxIndex: BigNumberish,
    amount: BigNumberish,
    token: string,
    toAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFromBoxToBox(
    fromBoxId: BigNumberish,
    toBoxId: BigNumberish,
    amount: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFromBoxToSafe(
    boxIndex: BigNumberish,
    amount: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFromSafeToBoxes(
    amount: BigNumberish,
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferNotAccountedFundsToSafe(
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    boxes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MoneyBoxesModule.MoneyBoxConfigurationStructOutput>;

    getBalanceOfBox(
      boxId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfBoxes(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeAddress(overrides?: CallOverrides): Promise<string>;

    transferFromBoxToAddress(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromBoxToBox(
      fromBoxId: BigNumberish,
      toBoxId: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromBoxToSafe(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromSafeToBoxes(
      amount: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferNotAccountedFundsToSafe(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    boxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceOfBox(
      boxId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfBoxes(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferFromBoxToAddress(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      toAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFromBoxToBox(
      fromBoxId: BigNumberish,
      toBoxId: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFromBoxToSafe(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFromSafeToBoxes(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferNotAccountedFundsToSafe(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boxes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceOfBox(
      boxId: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfBoxes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFromBoxToAddress(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      toAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFromBoxToBox(
      fromBoxId: BigNumberish,
      toBoxId: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFromBoxToSafe(
      boxIndex: BigNumberish,
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFromSafeToBoxes(
      amount: BigNumberish,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferNotAccountedFundsToSafe(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
